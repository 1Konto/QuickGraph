{
open System.Collections.Generic
open DotParserProject.GraphDataContainer

//containers for graph's data
let vertices_lists = new ResizeArray<string list>()
let graph_info = new Dictionary<string, string>()
let vertices_attrs = new Dictionary<string, (string*string) list>()
let edges_attrs = new Dictionary<string, (string*string) list>()
let general_attrs = new Dictionary<string, (string*string) list>()
let assign_stmt_list = new ResizeArray<string*string>()

//array of GraphDataContainer
let graphs = new ResizeArray<GraphDataContainer>()
graphs.Add(new GraphDataContainer())

//constants
let type_key = "type"
let strict_key = "is_strict"
let name_key = "name"
}

tokens {
_ of string
}

options {
translate = true
module = "DotParserProject.DotParser"
infEpsPath = epsilons
pos = uint64
}

module DotGrammar

list <item separator>: { [] } | hd=item tl=(separator i=item { i })* { hd::tl }

[<Start>]
graph : s=[STRICT] g=(t=GRAPH {t} | t=DIGRAPH {t}) name=[id] (SEP)* LCURBRACE x=stmt_list<<(graphs.[0])>> RCURBRACE (SEP)* 
{ graphs.[0].AddGeneralInfo [strict_key, (Utils.optToStr s); type_key, g; name_key, (Utils.optToStr name)] }

stmt_list<<(gr:GraphDataContainer)>> : lst=(l=full_stmt<<gr>> SEP {l})* {}

full_stmt<<(gr2:GraphDataContainer)>>: 
       ns=node_stmt<<gr2>> {}
     | l = edge_stmt<<gr2>> {}
	 | attr_s=attr_stmt<<gr2>> {}
	 | k=id ASSIGN v=id { gr2.AddAssignStmt k v }
	 | sub=subgraph<<(new GraphDataContainer())>> {}

attr_stmt<<(gr3:GraphDataContainer)>> : attr_name=(n=GRAPH {n} | n=NODE {n} | n=EDGE {n}) lst=attr_list
{ gr3.AddGeneralAttrs attr_name lst }

attr_list : l=(LSQBRACE l=a_list RSQBRACE {l})* { List.concat l }

a_list : lst=list<(k=id ASSIGN v=id {(k,v)}) COMMA> { lst }



edge_stmt<<(gr4:GraphDataContainer)>> : 
    edges=list<(nodeID=node_id { nodeID } | sub=subgraph<<(new GraphDataContainer())>> { sub })
			   (l=edge_operator{l})
			  >
    lst=attr_list 
{ gr4.AddEdgeStmtData edges lst } 

edge_operator : op=(p=EDGEOP {p} | p=DIEDGEOP {p}) 
{ op }

node_stmt<<(gr6:GraphDataContainer)>> : nodeID=node_id lst=attr_list
{ gr6.AddNodeStmtData [nodeID] lst }

node_id : nodeID=id [port]
{ nodeID }

port : (COL id [COL compass_pt {1}] {1} | COL compass_pt {1}) {1}

subgraph<<(gr7:GraphDataContainer)>> : [SUBGR [id] {1}] LCURBRACE l=stmt_list<<gr7>> RCURBRACE { "tmp_subgr_name" }

compass_pt : i=ID {}

id : i=ID { i }