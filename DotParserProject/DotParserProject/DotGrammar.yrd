{
let vrt = new ResizeArray<string>()
}

tokens {
    _ of string
}

options {
    translate = true
    module = "DotParserProject.DotParser"
    infEpsPath = epsilons
    pos = uint64
}


module DotGrammar



list <item separator>:
    { [] }
  | hd=item tl=(separator i=item {i})* {hd::tl}


[<Start>]
graph : [ STRICT {1} ] ( GRAPH {1} | DIGRAPH {1}) [ id ] LCURBRACE x=stmt_list RCURBRACE SEP {x}

stmt_list : lst=(l=full_stmt SEP {l})* {List.concat lst }

full_stmt : 
       node_stmt 
     | l = edge_stmt {l}
	 | attr_stmt 
	 | k=id ASSIGN v=id {[k + ":" + v]} 
	 | subgraph 

attr_stmt : (GRAPH {1} | NODE | EDGE) lst=attr_list {lst}

attr_list : l=(LSQBRACE l=a_list RSQBRACE {l})* {List.concat l}

a_list : lst = list<(k=id ASSIGN v=id {(k + ":" + v)}) COMMA> {lst}

edge_stmt : lst=list<(nId = node_id {[nId]} | subgraph ) edge_operator> l2=attr_list {(List.concat lst)@l2}

edge_operator : EDGEOP {1} | DIEDGEOP {1}

node_stmt : nId=node_id l=attr_list {nId::l}

node_id : {nodeId}=id [ port ] {nodeId }

port : (COL id [ COL compass_pt {1}] {1} | COL compass_pt {1}) {1}

subgraph : [ SUBGR [ id ] {1}] LCURBRACE l=stmt_list RCURBRACE {l}

compass_pt : i=ID { i }

id : i=ID  { i }
