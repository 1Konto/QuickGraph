{
module DotParserProject.DotLexer

open DotParserProject.DotParser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf

//Как сделать независимым от регистра Отв: в tryFind передать дот нет строку в lower case

let keywords =   
    [   
        "node", NODE;   
        "edge", EDGE;   
        "graph", GRAPH;   
        "digraph", DIGRAPH;   
        "subgraph", SUBGR;   
        "strict", STRICT;     
    ] |> Map.ofList 
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' ';']
let separator = '\n'
let id_expressions = ['a'-'z' 'A'-'Z' '_'](['a'-'z' 'A'-'Z' '_' '0'-'9'])*|['-']?('.'['0'-'9']+|['0'-'9']+('.'['0'-'9']+)?)
//let compass = "n" | "ne" | "e" | "se" | "s" | "sw" | "w" | "nw" | "c" | "_"

rule tokenize = parse
| whitespace { tokenize lexbuf }
| separator { SEP <| lexeme lexbuf }
| '[' { LSQBRACE <| lexeme lexbuf }
| ']' { RSQBRACE <| lexeme lexbuf }
| '{' { LCURBRACE <| lexeme lexbuf }
| '}' { RCURBRACE <| lexeme lexbuf }
| '=' { ASSIGN <| lexeme lexbuf }
| ':' { COL <| lexeme lexbuf }
| ',' { COMMA <| lexeme lexbuf }
| "--" { EDGEOP <| lexeme lexbuf }
| "->" { DIEDGEOP <| lexeme lexbuf }
| id_expressions { match keywords.TryFind(lexeme lexbuf) with
        | Some(keyword) -> keyword <| lexeme lexbuf
        | None -> ID <| lexeme lexbuf }
| eof { RNGLR_EOF <| lexeme lexbuf }
| _ { failwithf "unexpected input: %s" <| lexeme lexbuf }
