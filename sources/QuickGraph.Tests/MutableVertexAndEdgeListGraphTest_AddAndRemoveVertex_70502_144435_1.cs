using System.CodeDom.Compiler;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.CodeDom;
using QuickGraph.Unit;

namespace QuickGraph
{
    
    
    public partial class MutableVertexAndEdgeListGraphTest
    {
        
        /// <summary>
        ///  Test generated by Pex
        ///</summary>
        ///<remarks>
        ///  <para>
        ///    Test did not terminate within configured Exploration Bounds. This failure may not reproduce without Pex.
        ///  </para>
        ///  <para>
        ///    See http://codebox/pex/Wiki/View.aspx?title=MaxCalls+exceeded for more information.
        ///  </para>
        ///</remarks>
        [QuickGraph.Unit.TestAttribute()]
        [QuickGraph.Unit.IgnoreAttribute("nontermination")]
        [PexGeneratedBy(typeof(QuickGraph.MutableVertexAndEdgeListGraphTest), "MutableVertexAndEdgeListGraphTest.AddAndRemoveVertex(IMutableVertexAndEdgeListGra" +
            "ph<Int32,Edge<Int32>>, Int32)")]
        [GeneratedCode("Pex", "1.1.20502.1")]
        public void AddAndRemoveVertex_IMutableVertexAndEdgeListGraph2_Int32_70502_144435_0_01()
        {
            QuickGraph.AdjacencyGraph<int, QuickGraph.Edge<int>> _r0 = QuickGraph.AdjacencyGraphFactory.OracleFactory();
            this.AddAndRemoveVertex(((QuickGraph.IMutableVertexAndEdgeListGraph<int, QuickGraph.Edge<int>>)(_r0)), -1);
        }
        
        /// <summary>
        ///  Test generated by Pex
        ///</summary>
        ///<remarks>
        ///  <para>
        ///    Test did not terminate within configured Exploration Bounds. This failure may not reproduce without Pex.
        ///  </para>
        ///  <para>
        ///    See http://codebox/pex/Wiki/View.aspx?title=MaxCalls+exceeded for more information.
        ///  </para>
        ///</remarks>
        [QuickGraph.Unit.TestAttribute()]
        [QuickGraph.Unit.IgnoreAttribute("nontermination")]
        [PexGeneratedBy(typeof(QuickGraph.MutableVertexAndEdgeListGraphTest), "MutableVertexAndEdgeListGraphTest.AddAndRemoveVertex(IMutableVertexAndEdgeListGra" +
            "ph<Int32,Edge<Int32>>, Int32)")]
        [GeneratedCode("Pex", "1.1.20502.1")]
        public void AddAndRemoveVertex_IMutableVertexAndEdgeListGraph2_Int32_70502_144435_0_02()
        {
            IPexOracleRecorder oracle = PexOracle.NewTest();
            oracle.DefaultSession.ChooseAt(1, "edgeCount", -1).ChooseAt(0, "vertexcount", 1);
            QuickGraph.AdjacencyGraph<int, QuickGraph.Edge<int>> _r0 = QuickGraph.AdjacencyGraphFactory.OracleFactory();
            this.AddAndRemoveVertex(((QuickGraph.IMutableVertexAndEdgeListGraph<int, QuickGraph.Edge<int>>)(_r0)), -1);
        }
        
        /// <summary>
        ///  Test generated by Pex
        ///</summary>
        ///<exception cref="System.ArgumentException">
        ///  vertex already in graph
        ///Parameter name: v
        ///</exception>
        [QuickGraph.Unit.TestAttribute()]
        [QuickGraph.Unit.ExpectedArgumentExceptionAttribute()]
        [PexGeneratedBy(typeof(QuickGraph.MutableVertexAndEdgeListGraphTest), "MutableVertexAndEdgeListGraphTest.AddAndRemoveVertex(IMutableVertexAndEdgeListGra" +
            "ph<Int32,Edge<Int32>>, Int32)")]
        [GeneratedCode("Pex", "1.1.20502.1")]
        public void AddAndRemoveVertex_IMutableVertexAndEdgeListGraph2_Int32_70502_144436_0_03()
        {
            IPexOracleRecorder oracle = PexOracle.NewTest();
            oracle.DefaultSession.ChooseAt(1, "edgeCount", -1).ChooseAt(0, "vertexcount", 1);
            QuickGraph.AdjacencyGraph<int, QuickGraph.Edge<int>> _r0 = QuickGraph.AdjacencyGraphFactory.OracleFactory();
            this.AddAndRemoveVertex(((QuickGraph.IMutableVertexAndEdgeListGraph<int, QuickGraph.Edge<int>>)(_r0)), 0);
        }
        
        /// <summary>
        ///  Test generated by Pex
        ///</summary>
        ///<remarks>
        ///  <para>
        ///    Test did not terminate within configured Exploration Bounds. This failure may not reproduce without Pex.
        ///  </para>
        ///  <para>
        ///    See http://codebox/pex/Wiki/View.aspx?title=MaxCalls+exceeded for more information.
        ///  </para>
        ///</remarks>
        [QuickGraph.Unit.TestAttribute()]
        [QuickGraph.Unit.IgnoreAttribute("nontermination")]
        [PexGeneratedBy(typeof(QuickGraph.MutableVertexAndEdgeListGraphTest), "MutableVertexAndEdgeListGraphTest.AddAndRemoveVertex(IMutableVertexAndEdgeListGra" +
            "ph<Int32,Edge<Int32>>, Int32)")]
        [GeneratedCode("Pex", "1.1.20502.1")]
        public void AddAndRemoveVertex_IMutableVertexAndEdgeListGraph2_Int32_70502_144436_0_04()
        {
            IPexOracleRecorder oracle = PexOracle.NewTest();
            oracle.DefaultSession.ChooseAt(1, "edgeCount", 30).ChooseAt(0, "vertexcount", 2);
            QuickGraph.AdjacencyGraph<int, QuickGraph.Edge<int>> _r0 = QuickGraph.AdjacencyGraphFactory.OracleFactory();
            this.AddAndRemoveVertex(((QuickGraph.IMutableVertexAndEdgeListGraph<int, QuickGraph.Edge<int>>)(_r0)), 32);
        }
        
        /// <summary>
        ///  Test generated by Pex
        ///</summary>
        ///<remarks>
        ///  <para>
        ///    Test did not terminate within configured Exploration Bounds. This failure may not reproduce without Pex.
        ///  </para>
        ///  <para>
        ///    See http://codebox/pex/Wiki/View.aspx?title=MaxCalls+exceeded for more information.
        ///  </para>
        ///</remarks>
        [QuickGraph.Unit.TestAttribute()]
        [QuickGraph.Unit.IgnoreAttribute("nontermination")]
        [PexGeneratedBy(typeof(QuickGraph.MutableVertexAndEdgeListGraphTest), "MutableVertexAndEdgeListGraphTest.AddAndRemoveVertex(IMutableVertexAndEdgeListGra" +
            "ph<Int32,Edge<Int32>>, Int32)")]
        [GeneratedCode("Pex", "1.1.20502.1")]
        public void AddAndRemoveVertex_IMutableVertexAndEdgeListGraph2_Int32_70502_144436_0_05()
        {
            IPexOracleRecorder oracle = PexOracle.NewTest();
            oracle.DefaultSession.ChooseAt(1, "edgeCount", 30).ChooseAt(0, "vertexcount", 1);
            QuickGraph.AdjacencyGraph<int, QuickGraph.Edge<int>> _r0 = QuickGraph.AdjacencyGraphFactory.OracleFactory();
            this.AddAndRemoveVertex(((QuickGraph.IMutableVertexAndEdgeListGraph<int, QuickGraph.Edge<int>>)(_r0)), 32);
        }
    }
}
