{
open System.Collections.Generic
open DotParserProject.GraphDataContainer

let graphs = new ResizeArray<GraphDataContainer>()

}

tokens {
_ of string
}

options {
translate = true
module = "DotParserProject.DotParser"
infEpsPath = epsilons
pos = uint64
}

module DotGrammar

list <item separator>: { [] } | hd=item tl=(separator i=item { i })* { hd::tl }

[<Start>]
graph : strict=[STRICT] graph_type=(t=GRAPH {t} | t=DIGRAPH {t}) name=[id]
LCURBRACE stmt_list<<(graphs.[0])>> RCURBRACE
{ graphs.[0].AddGeneralInfo strict graph_type name }

stmt_list<<(gr:GraphDataContainer)>> : (s=stmt<<gr>> [SEP] {s})* {}

stmt<<(gr2:GraphDataContainer)>>: 
       node_stmt<<gr2>> {}
     | edge_stmt<<gr2>> {}
	 | attr_s=attr_stmt<<gr2>> {}
	 | k=id ASSIGN v=id { gr2.AddAssignStmt k v }
	 | sub=subgraph<<(new GraphDataContainer())>> {}

attr_stmt<<(gr3:GraphDataContainer)>> : attr_name=(n=GRAPH {n} | n=NODE {n} | n=EDGE {n}) lst=attr_list
{ gr3.AddGeneralAttrs attr_name lst }

attr_list : l=(LSQBRACE l=a_list RSQBRACE {l})* { List.concat l }

a_list : lst=list<(k=id ASSIGN v=id {(k,v)}) COMMA> { lst }

edge_stmt<<(gr4:GraphDataContainer)>> : 
edges=list<(nodeID=node_id { nodeID } | sub=subgraph<<(new GraphDataContainer())>> { sub }) (l=edge_operator{l})> lst=attr_list 
{ gr4.AddEdgeStmtData edges lst }

edge_operator : op=(p=EDGEOP {p} | p=DIEDGEOP {p})
{ op }

node_stmt<<(gr6:GraphDataContainer)>> : nodeID=node_id lst=attr_list
{ gr6.AddNodeStmtData nodeID lst }

node_id : nodeID=id [port]
{ nodeID }

port : (COL id [COL compass_pt {1}] {1} | COL compass_pt {1}) {1}

subgraph<<(gr7:GraphDataContainer)>> : n=[SUBGR i=[id] {i}] LCURBRACE l=stmt_list<<gr7>> RCURBRACE 
{ Utils.addSubgraphToArray n gr7 graphs }

compass_pt : i=ID {}

id : i=ID { i }